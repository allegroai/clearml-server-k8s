trains:
  nodeSelector: "app: trains"
  namespace: trains
  image:
    repository: allegroai/trains-server
    tag: 0.16.1-320
apiserver:
  prepopulateEnabled: "true"
  prepopulateZipFiles: "/opt/trains/db-pre-populate"
  prepopulateArtifactsPath: "/mnt/fileserver"
  deploymentType: "Helm"
  configDir: /opt/trains/config
  volumeMounts:
    - mountPath: /var/log/trains
      name: apiserver-hostpath0
    - mountPath: /opt/trains/config
      name: apiserver-hostpath1
  volumes:
    - name: apiserver-hostpath0
      persistentVolumeClaim:
        claimName: apiserver-pv-claim0
    - name: apiserver-hostpath1
      persistentVolumeClaim:
        claimName: apiserver-pv-claim1
  resources:
    requests:
        memory: "150M"
        cpu: "200m"
    limits:
        memory: "150M"
        cpu: "400m"
agent:
  numberOfTrainsAgents: 0
  nvidiaGpusPerAgent: 1
  defaultBaseDocker: "nvidia/cuda"
  dockerMode: true
  agentVersion: "" # if set, it *MUST* include comparison operator (e.g. ">=0.16.1")
  queues: "default" # multiple queues can be specified separated by a space (e.g. "important_jobs default")
  trainsApiHost: "http://apiserver-service:8008"
  trainsWebHost: "http://webserver-service"
  trainsFilesHost: "http://fileserver-service:8081"
  trainsGitUser: null
  trainsGitPassword: null
  trainsAccessKey: null
  trainsSecretKey: null
  awsAccessKeyId: null
  awsSecretAccessKey: null
  awsDefaultRegion: null
  azureStorageAccount: null
  azureStorageKey: null
  trainsConfig: |-
    sdk {
    }
agentservices:
  trainsHostIp: null
  defaultBaseDocker: "ubuntu:18.04"
  agentVersion: ""
  trainsApiHost: "http://apiserver-service:8008"
  trainsWebHost: null
  trainsFilesHost: null
  trainsGitUser: null
  trainsGitPassword: null
  trainsAccessKey: null
  trainsSecretKey: null
  awsAccessKeyId: null
  awsSecretAccessKey: null
  awsDefaultRegion: null
  azureStorageAccount: null
  azureStorageKey: null
  googleCredentials: null
  trainsWorkerId: "trains-services"
  trainsDockerHostMount: "/opt/trains/agent:/root/.trains"
storage:
  use_nfs: false
  nfs:
    base_path: /data/trains
    server: null
  capacities:
    fileserver0: 5Gi
    fileserver1: 50Gi
    apiserver0: 10Gi
    apiserver1: 1Gi
services:
  webserver:
    nodePort: 30080
    name: webserver-service
  apiserver:
    nodePort: 30008
    name: apiserver-service
  fileserver:
    nodePort: 30081
    name: fileserver-service
  agentservices:
    name: agentservices-service
ingress:
    enabled: false
    name: trains-server-ingress
    annotations: {}
    host: ""
    tls:
        secretName: ""
use_secrets_flexvolume: false
redis: # configuration from https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
  enabled: true
  usePassword: false
  databaseNumber: 0
  master:
    port: 6379
    persistence:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 5Gi
  cluster:
    enabled: false
mongodb: # configuration from https://github.com/bitnami/charts/blob/master/bitnami/mongodb/values.yaml
  enabled: true
  architecture: standalone
  auth:
    enabled: false
  replicaCount: 1
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 50Gi
  service:
    type: ClusterIP
    port: 27017
    portName: mongo-service
elasticsearch: # configuration from https://github.com/elastic/helm-charts/blob/7.10/elasticsearch/values.yaml
  enabled: true
  httpPort: 9200
  roles:
    master: "true"
    ingest: "true"
    data: "true"
    remote_cluster_client: "true"
  replicas: 1
  minimumMasterNodes: 1
  esJavaOpts: "-Xmx2g -Xms2g"
  resources:
    requests:
      memory: "4Gi"
    limits:
      memory: "4Gi"
  persistence:
    enabled: true
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 50Gi
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: false
